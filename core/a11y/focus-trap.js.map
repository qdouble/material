{"version":3,"sources":["core/a11y/focus-trap.ts"],"names":[],"mappings":"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","file":"focus-trap.js","sourcesContent":["import {Component, ViewEncapsulation, ViewChild, ElementRef} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\n\n\n/**\n * Directive for trapping focus within a region.\n *\n * NOTE: This directive currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'focus-trap',\n  templateUrl: 'focus-trap.html',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FocusTrap {\n  @ViewChild('trappedContent') trappedContent: ElementRef;\n\n  constructor(private _checker: InteractivityChecker) { }\n\n  /** Focuses the first tabbable element within the focus trap region. */\n  focusFirstTabbableElement() {\n    let rootElement = this.trappedContent.nativeElement;\n    let redirectToElement = rootElement.querySelector('[md-focus-start]') as HTMLElement ||\n                            this._getFirstTabbableElement(rootElement);\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n\n  /** Focuses the last tabbable element within the focus trap region. */\n  focusLastTabbableElement() {\n    let rootElement = this.trappedContent.nativeElement;\n    let focusTargets = rootElement.querySelectorAll('[md-focus-end]');\n    let redirectToElement: HTMLElement = null;\n\n    if (focusTargets.length) {\n      redirectToElement = focusTargets[focusTargets.length - 1] as HTMLElement;\n    } else {\n      redirectToElement = this._getLastTabbableElement(rootElement);\n    }\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order.\n    let childCount = root.children.length;\n    for (let i = 0; i < childCount; i++) {\n      let tabbableChild = this._getFirstTabbableElement(root.children[i] as HTMLElement);\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    for (let i = root.children.length - 1; i >= 0; i--) {\n      let tabbableChild = this._getLastTabbableElement(root.children[i] as HTMLElement);\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n}\n"]}